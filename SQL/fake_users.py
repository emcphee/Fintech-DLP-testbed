import random
import string
import bcrypt
import json
def generate_records(num_records, output_file):
    with open(output_file , "w") as fp:
        records = []
        for _ in range(num_records):
            # user_id is autogenerated

            # username
            username = ''.join(random.choice(string.ascii_letters) for _ in range(10))
            
            # first and last names
            fname = ''.join(random.choice(string.ascii_letters) for _ in range(10))
            lname = ''.join(random.choice(string.ascii_letters) for _ in range(10))

            # email
            email = ''.join(random.choice(string.ascii_letters) for _ in range(10)) + "@email.com"

            # password, salt, and hash
            password = ''.join(random.choice(string.ascii_letters) for _ in range(10))
            encoded_password = password.encode()
            password_salt = bcrypt.gensalt(rounds=12)
            password_hash = bcrypt.hashpw(encoded_password, password_salt)

            # Checks if password matches (not needed here, just leaving it here as an example)
            #print(bcrypt.checkpw(encoded_password, password_hash))

            entry = {
                "username": username,
                "fname": fname,
                "lname": lname,
                "email": email,
                "password": password,
                "password_salt": password_salt.decode('utf-8'),
                "password_hash": password_hash.decode('utf-8')
            }
            records.append(entry)
        json.dump(records, fp)

# NOTE: password salt and hash need to be re-encoded
#       They were converted to utf-8 in order to be stored in the json
def read_records(data_file):
    with open(data_file, "r") as fp:
        records = json.load(fp)
    return records

if __name__ == "__main__":
    #generate_records(10, 'fake_records.json')
    print(read_records('fake_records.json')[0])